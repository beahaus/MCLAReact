{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\The ENTP\\\\Github projects\\\\MCLATwo\\\\mclareact\\\\client\\\\src\\\\components\\\\Scramble\\\\Scramble.js\";\nimport React, { Component } from \"react\";\nexport default class TextScrambler extends Component {\n  constructor(el, props) {\n    super(props);\n\n    this.update = () => {\n      let output = \"\";\n      let complete = 0;\n\n      for (let i = 0, n = this.queue.length; i < n; i++) {\n        let {\n          from,\n          to,\n          start,\n          end,\n          char\n        } = this.queue[i];\n\n        if (this.frame >= end) {\n          complete++;\n          output += to;\n        } else if (this.frame >= start) {\n          if (!char || Math.random() < 0.2) {\n            char = this.randomChar();\n            this.queue[i].char = char;\n          }\n\n          output += `<span class=\"dud\">${char}</span>`;\n        } else {\n          output += from;\n        }\n      }\n\n      this.el.innerHTML = output;\n\n      if (complete === this.queue.length) {\n        this.resolve();\n      } else {\n        this.frameRequest = requestAnimationFrame(this.update);\n        this.frame++;\n      }\n    };\n\n    this.randomChar = () => {\n      return this.chars[Math.floor(Math.random() * this.chars.length)];\n    };\n\n    this.next = (phrases, el, fx, counter) => {\n      fx.setText(phrases[counter]).then(() => {// setTimeout(next, 2500);\n      });\n      counter = (counter + 1) % phrases.length;\n    };\n\n    this.el = el;\n    this.chars = \"!<>-_//[]{}\\\\—=+*^?#________\";\n    this.update = this.update.bind(this);\n    this.queue = [];\n    this.frame = 0;\n\n    this.setText = newText => {\n      const oldText = this.el.innerText;\n      const length = Math.max(oldText.length, newText.length);\n      const promise = new Promise(resolve => this.resolve = resolve);\n\n      for (let i = 0; i < length; i++) {\n        const from = oldText[i] || \"\";\n        const to = newText[i] || \"\";\n        const start = Math.floor(Math.random() * 60);\n        const end = start + Math.floor(Math.random() * 80);\n        this.queue.push({\n          from,\n          to,\n          start,\n          end\n        });\n      }\n\n      cancelAnimationFrame(this.frameRequest);\n      this.update();\n      return promise;\n    };\n  }\n\n  componentDidMount() {\n    // words to be displayed\n    var phrases = [\"MORSE CODE LEARNING ACADEMY\"]; //   // word scrambler text\n\n    var el = document.querySelector(\"#scrabble\");\n    const fx = new TextScrambler(el);\n    let counter = 0;\n    this.next(phrases, el, fx, counter);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/The ENTP/Github projects/MCLATwo/mclareact/client/src/components/Scramble/Scramble.js"],"names":["React","Component","TextScrambler","constructor","el","props","update","output","complete","i","n","queue","length","from","to","start","end","char","frame","Math","random","randomChar","innerHTML","resolve","frameRequest","requestAnimationFrame","chars","floor","next","phrases","fx","counter","setText","then","bind","newText","oldText","innerText","max","promise","Promise","push","cancelAnimationFrame","componentDidMount","document","querySelector","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class TextScrambler extends Component {\r\n  constructor(el, props) {\r\n    super(props);\r\n    this.el = el;\r\n    this.chars = \"!<>-_//[]{}\\\\—=+*^?#________\";\r\n    this.update = this.update.bind(this);\r\n    this.queue = [];\r\n    this.frame = 0;\r\n\r\n    this.setText = (newText) => {\r\n      const oldText = this.el.innerText;\r\n      const length = Math.max(oldText.length, newText.length);\r\n      const promise = new Promise((resolve) => (this.resolve = resolve));\r\n      for (let i = 0; i < length; i++) {\r\n        const from = oldText[i] || \"\";\r\n        const to = newText[i] || \"\";\r\n        const start = Math.floor(Math.random() * 60);\r\n        const end = start + Math.floor(Math.random() * 80);\r\n        this.queue.push({ from, to, start, end });\r\n      }\r\n      cancelAnimationFrame(this.frameRequest);\r\n\r\n      this.update();\r\n      return promise;\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // words to be displayed\r\n    var phrases = [\"MORSE CODE LEARNING ACADEMY\"];\r\n    //   // word scrambler text\r\n    var el = document.querySelector(\"#scrabble\");\r\n    const fx = new TextScrambler(el);\r\n    let counter = 0;\r\n    this.next(phrases, el, fx, counter);\r\n  }\r\n\r\n  update = () => {\r\n    let output = \"\";\r\n    let complete = 0;\r\n    for (let i = 0, n = this.queue.length; i < n; i++) {\r\n      let { from, to, start, end, char } = this.queue[i];\r\n      if (this.frame >= end) {\r\n        complete++;\r\n        output += to;\r\n      } else if (this.frame >= start) {\r\n        if (!char || Math.random() < 0.2) {\r\n          char = this.randomChar();\r\n          this.queue[i].char = char;\r\n        }\r\n        output += `<span class=\"dud\">${char}</span>`;\r\n      } else {\r\n        output += from;\r\n      }\r\n    }\r\n    this.el.innerHTML = output;\r\n    if (complete === this.queue.length) {\r\n      this.resolve();\r\n    } else {\r\n      this.frameRequest = requestAnimationFrame(this.update);\r\n      this.frame++;\r\n    }\r\n  };\r\n  randomChar = () => {\r\n    return this.chars[Math.floor(Math.random() * this.chars.length)];\r\n  };\r\n\r\n  next = (phrases, el, fx, counter) => {\r\n    fx.setText(phrases[counter]).then(() => {\r\n      // setTimeout(next, 2500);\r\n    });\r\n    counter = (counter + 1) % phrases.length;\r\n  };\r\n\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}